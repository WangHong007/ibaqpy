import math
from typing import List

import click
import pandas as pd
from pandas import DataFrame, Series
from pyopenms import *
from pyteomics import mztab as mztab_reader
import re
import os

from typing_extensions import OrderedDict


def get_run_mztab(ms_run: str, metadata: OrderedDict):
  """
  Convert the ms_run into a reference file for merging with msstats output
  :param ms_run: ms_run index in mztab
  :param metadata:  metadata information in mztab
  :return: file name
  """
  m = re.search(r"\[([A-Za-z0-9_]+)\]", ms_run)
  file_location = metadata['ms_run[' + str(m.group(1)) + "]-location"]
  return os.path.basename(file_location)

def best_probability_error_bestsearch_engine(probability: float):
  """
  Convert probability to a Best search engine score
  :param probability: probability
  :return:
  """
  return 1 - probability;

def print_help_msg(command):
  """
  Print help information
  :param command: command to print helps
  :return: print help
  """
  with click.Context(command) as ctx:
    click.echo(command.get_help(ctx))

@click.command()
@click.option("-t", "--triqler", help="Triqler file import generated by quantms")
@click.option("-m", "--msstats", help="MsStats file import generated by quantms")
@click.option("-z", "--mztab",   help="MzTab file import generated by quantms")
@click.option("-s", "--sdrf",    help="SDRF file import generated by quantms")
@click.option("-o", "--output", help = "Peptide intensity file including other all properties for normalization")
def peptide_file_generation( triqler: str, msstats: str, mztab: str, sdrf: str, output: str) -> None:

  if triqler is None or msstats is None or mztab is None or sdrf is None or output is None:
    print_help_msg(peptide_file_generation)
    exit(-1)

  # Read the triqler file
  triqler_df = pd.read_csv(triqler, sep="\t")
  print(triqler_df.head())

  triqler_df.rename(columns={'proteins': 'ProteinName', 'peptide':'PeptideSequence','charge':'PrecursorCharge','run':'Run', 'condition': 'Condition', 'intensity':'Intensity'} , inplace=True)

  # Read the msstats file
  msstats_df = pd.read_csv(msstats, sep=",")
  print(msstats_df)

  result_df = pd.merge(msstats_df, triqler_df, how='left', on=['Run', 'ProteinName', 'PrecursorCharge', 'PeptideSequence', 'Intensity', 'Condition'])

  # Read the sdrf file
  sdrf_df = pd.read_csv(sdrf, sep="\t")
  print(sdrf_df)

  # Read the mztab file
  mztab_df = mztab_reader.MzTab(mztab)
  psms_df  = mztab_df.spectrum_match_table
  psms_df['Reference'] = psms_df['spectra_ref'].apply(get_run_mztab, metadata=mztab_df.metadata)

  psms_df['searchScore'] = psms_df['opt_global_Posterior_Error_Probability_score'].apply(best_probability_error_bestsearch_engine)
  psms_df.rename(columns={'opt_global_cv_MS:1000889_peptidoform_sequence':'PeptideSequence', 'charge':'PrecursorCharge'}, inplace=True)

  result_df = pd.merge(result_df, psms_df, how='left', on=['PeptideSequence', 'PrecursorCharge', 'Reference'])


  print(result_df)

if __name__ == '__main__':
  peptide_file_generation()
